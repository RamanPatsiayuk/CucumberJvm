group 'io.cucumber.bdd.selenium'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'ru.vyarus.quality'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}

repositories {
    jcenter()
    mavenCentral()
}

def springVersion = "5.0.3.RELEASE"
def seleniumJava = '3.8.1'
def junit = '4.12'
def commons_lang3 = '3.7'
def hamcrest = "1.3"
def log4j = "1.2.17"
def quality_plugin = "2.4.0"
def cucumberJava = "2.3.1"
def cucumberJunit = "1.2.5"

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'ru.vyarus:gradle-quality-plugin:2.4.0'
    }
}

//https://github.com/xvik/gradle-quality-plugin
quality {
    // Tools versions
    checkstyleVersion = '8.2'
    pmdVersion = '5.8.1'
    findbugsVersion = '3.0.1'
    codenarcVersion = '1.0'
    animalsnifferVersion

    /**
     * When disabled, quality plugins will not be registered automatically (according to sources).
     * Only manualy registered quality plugins will be configured.
     */
    boolean autoRegistration = true

    // Enable/disable tools (when auto registration disabled control configuration appliance)

    checkstyle = true
    pmd = true
    findbugs = true
    codenarc = true

    /**
     * The analysis effort level. The value specified should be one of min, default, or max.
     * Higher levels increase precision and find more bugs at the expense of running time and
     * memory consumption. Default is 'max'.
     */
    findbugsEffort = 'max'

    /**
     * The priority threshold for reporting bugs. If set to low, all bugs are reported.
     * If set to medium, medium and high priority bugs are reported.
     * If set to high, only high priority bugs are reported. Default is 'medium'.
     */
    findbugsLevel = 'medium'

    /**
     * Javac lint options to show compiler warnings, not visible by default.
     * Applies to all CompileJava tasks.
     * Options will be added as -Xlint:option
     * Full list of options: http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCJCABJ
     */
    lintOptions = ['deprecation', 'unchecked']

    /**
     * Strict quality leads to build fail on any violation found. If disabled, all violation
     * are just printed to console.
     */
    strict = true

    /**
     * When false, disables quality tasks execution. Allows disabling tasks without removing plugins.
     * Quality tasks are still registered, but skip execution, except when task called directly or through
     * checkQualityMain (or other source set) grouping task.
     */
    boolean enabled = true

    /**
     * When false, disables reporting quality issues to console. Only gradle general error messages will
     * remain in logs. This may be useful in cases when project contains too many warnings.
     * Also, console reporting require xml reports parsing, which could be time consuming in case of too
     * many errors (large xml reports).
     * True by default.
     */
    boolean consoleReporting = true

    /**
     * Source sets to apply checks on.
     * Default is [sourceSets.main] to apply only for project sources, excluding tests.
     */
    sourceSets = [project.sourceSets.main]

    /**
     * Source patterns (relative to source dir) to exclude from checks. Simply sets exclusions to quality tasks.
     *
     * Animalsniffer is not affected because
     * it's a different kind of check (and, also, it operates on classes so source patterns may not comply).
     *
     * Findbugs does not support exclusion directly, but plugin will resolve excluded classes and apply
     * them to xml exclude file (default one or provided by user).
     *
     * By default nothing is excluded.
     *
     * IMPORTANT: Patterns are checked relatively to source set dirs (not including them). So you can only
     * match source files and packages, but not absolute file path (this is gradle specific, not plugin).
     *
     * @see org.gradle.api.tasks.SourceTask#exclude(java.lang.Iterable) (base class for all quality tasks)
     */
    Collection<String> exclude = []

    /**
     * Direct sources to exclude from checks (except animalsniffer).
     * This is useful as last resort, when extension or package is not enough for filtering.
     * Use {@link Project#files(java.lang.Object)} or {@link Project#fileTree(java.lang.Object)}
     * to create initial collections and apply filter on it (using
     * {@link org.gradle.api.file.FileTree#matching(groovy.lang.Closure)}).
     *
     * Plugin will include files into findbugs exclusion filter xml (default one or provided by user).
     *
     * Note: this must be used when excluded classes can't be extracted to different source set and
     * filter by package and filename is not sufficient.
     */
    FileCollection excludeSources

    /**
     * User configuration files directory. Files in this directory will be used instead of default (bundled) configs.
     */
    configDir = 'gradle/config/'
}

defaultTasks 'build', 'clean', 'test'

dependencies {
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: seleniumJava
    compile group: 'io.cucumber', name: 'cucumber-java', version: cucumberJava
    compile group: 'org.apache.commons', name: 'commons-lang3', version: commons_lang3
    compile group: 'ru.vyarus', name: 'gradle-quality-plugin', version: quality_plugin
    compile group: 'log4j', name: 'log4j', version: log4j
    compile group: 'org.springframework', name: 'spring-core', version: springVersion
    compile group: 'org.springframework', name: 'spring-context', version: springVersion
    compile group: 'org.springframework', name: 'spring-context-support', version: springVersion
    compile group: 'org.springframework', name: 'spring-beans', version: springVersion
    testCompile group: 'org.springframework', name: 'spring-test', version: springVersion
    testCompile group: 'junit', name: 'junit', version: junit
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrest
    testCompile group: 'info.cukes', name: 'cucumber-junit', version: cucumberJunit
}

test {
    useJUnit()
    reports {
        junitXml.enabled = false
        html.enabled = true
    }
}
tasks.withType(Test).all { testTask ->
    systemProperties['browser'] = System.getProperty('browser', 'firefox')
    systemProperties['env'] = System.getProperty('env', 'local')
    testTask.systemProperties['file.encoding'] = 'UTF-8'
    testTask.testLogging.showStandardStreams = true
    testTask.outputs.upToDateWhen { false }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}
task cleanBuild1(type: GradleBuild) {
    tasks = ['clean', 'build']
}
